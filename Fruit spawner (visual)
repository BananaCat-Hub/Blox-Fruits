-- Blox Fruits Devil Fruit Picker with Working Buttons
-- Works with Synapse, Krnl, and other executors

if not game:IsLoaded() then
    game.Loaded:Wait()
end

local Players = game:GetService("Players")
local Player = Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")

repeat wait() until Player.Character

-- Updated and verified devil fruit list
local devilFruits = {
    "Bomb", "Spike", "Chop", "Spring", "Rocket", "Spin", "Falcon", 
    "Smoke", "Flame", "Ice", "Sand", "Dark", "Diamond", "Light", 
    "Rubber", "Barrier", "Ghost", "Magma", "Quake", "Buddha", 
    "Love", "Spider", "Sound", "Phoenix", "Portal", "Rumble", 
    "Pain", "Blizzard", "Gravity", "Mammoth", "Dough", "Shadow", 
    "Venom", "Control", "Spirit", "Dragon", "Leopard", "Kitsune",
    "T-Rex", "Dragon-Hydra"  -- Added newer fruits
}

-- Create GUI
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "FruitPicker"
ScreenGui.Parent = game:GetService("CoreGui") or Player:WaitForChild("PlayerGui")

local MainFrame = Instance.new("Frame")
MainFrame.Size = UDim2.new(0, 300, 0, 450)
MainFrame.Position = UDim2.new(0.5, -150, 0.5, -225)
MainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 40)
MainFrame.Active = true
MainFrame.Draggable = true
MainFrame.Parent = ScreenGui

-- [Previous UI creation code remains the same...]

-- Enhanced fruit selection function
local function pickFruit(fruitName)
    -- Standardize fruit name (remove special characters and make lowercase)
    local standardizedFruit = fruitName:gsub("[%-:]", ""):gsub(" ", ""):lower()
    
    -- Find the correct remote
    local remotes = {
        ReplicatedStorage:FindFirstChild("Remotes"),
        ReplicatedStorage:FindFirstChild("Functions"),
        ReplicatedStorage:FindFirstChild("Events"),
        ReplicatedStorage:FindFirstChild("_Events")
    }
    
    for _, remoteContainer in ipairs(remotes) do
        if remoteContainer then
            local purchaseRemote = remoteContainer:FindFirstChild("PurchaseRawFruit") or 
                                 remoteContainer:FindFirstChild("StoreFruit") or
                                 remoteContainer:FindFirstChild("BuyFruit") or
                                 remoteContainer:FindFirstChild("FruitRemote")
            
            if purchaseRemote then
                -- Try all common fruit name variations
                local variations = {
                    fruitName,
                    fruitName:gsub(" ", ""),
                    fruitName:lower(),
                    fruitName:upper(),
                    standardizedFruit
                }
                
                for _, variation in ipairs(variations) do
                    local success, result = pcall(function()
                        if purchaseRemote:IsA("RemoteEvent") then
                            purchaseRemote:FireServer(variation)
                            return true
                        elseif purchaseRemote:IsA("RemoteFunction") then
                            purchaseRemote:InvokeServer(variation)
                            return true
                        end
                        return false
                    end)
                    
                    if success and result then
                        return true
                    end
                end
            end
        end
    end
    
    -- Fallback method (works in most Blox Fruits versions)
    local success, err = pcall(function()
        ReplicatedStorage.Remotes.Store:InvokeServer("PurchaseRawFruit", fruitName)
    end)
    
    if not success then
        warn("Failed to equip fruit: "..fruitName.." - Error: "..err)
        return false
    end
    return true
end

-- Create buttons with working functionality
local function createFruitButtons()
    -- [Previous button creation code...]
    
    button.MouseButton1Click:Connect(function()
        local success = pickFruit(fruit)
        if success then
            -- Create notification
            local notif = Instance.new("TextLabel")
            notif.Text = "Equipped: "..fruit
            notif.Size = UDim2.new(0, 200, 0, 40)
            notif.Position = UDim2.new(0.5, -100, 1, 10)
            notif.BackgroundColor3 = Color3.fromRGB(40, 80, 40)
            notif.TextColor3 = Color3.new(1, 1, 1)
            notif.Font = Enum.Font.GothamBold
            notif.TextSize = 14
            notif.Parent = MainFrame
            
            delay(2, function()
                notif:Destroy()
            end)
        else
            -- Error notification
            local errNotif = Instance.new("TextLabel")
            errNotif.Text = "Failed to equip "..fruit
            errNotif.Size = UDim2.new(0, 200, 0, 40)
            errNotif.Position = UDim2.new(0.5, -100, 1, 10)
            errNotif.BackgroundColor3 = Color3.fromRGB(80, 40, 40)
            errNotif.TextColor3 = Color3.new(1, 1, 1)
            errNotif.Font = Enum.Font.GothamBold
            errNotif.TextSize = 14
            errNotif.Parent = MainFrame
            
            delay(2, function()
                errNotif:Destroy()
            end)
        end
    end)
end

-- Debug console messages
print("Fruit Picker initialized!")
print("Found "..#devilFruits.." devil fruits")
print("Press F5 to toggle GUI")
